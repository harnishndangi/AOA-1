#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to compute LCS length and store DP table
int **computeLCS(char *str1, char *str2, int len1, int len2) {
    int **dp = (int **)malloc((len1 + 1) * sizeof(int *));
    for (int i = 0; i <= len1; i++) {
        dp[i] = (int *)malloc((len2 + 1) * sizeof(int));
    }

    for (int i = 0; i <= len1; i++) {
        for (int j = 0; j <= len2; j++) {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else if (str1[i - 1] == str2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = (dp[i - 1][j] > dp[i][j - 1]) ? dp[i - 1][j] : dp[i][j - 1];
        }
    }

    return dp;
}

// Function to get the LCS string using backtracking
char *getLCSString(char *str1, char *str2, int len1, int len2, int **dp) {
    int index = dp[len1][len2];
    char *lcsStr = (char *)malloc((index + 1) * sizeof(char));
    lcsStr[index] = '\0';

    int i = len1, j = len2;
    while (i > 0 && j > 0) {
        if (str1[i - 1] == str2[j - 1]) {
            lcsStr[index - 1] = str1[i - 1];
            i--;
            j--;
            index--;
        } else if (dp[i - 1][j] > dp[i][j - 1]) {
            i--;
        } else {
            j--;
        }
    }

    return lcsStr;
}

int main() {
    char str1[100], str2[100];
    printf("Enter the first string: ");
    scanf("%99s", str1);
    printf("Enter the second string: ");
    scanf("%99s", str2);

    int len1 = strlen(str1);
    int len2 = strlen(str2);

    int **dp = computeLCS(str1, str2, len1, len2);
    int lcsLength = dp[len1][len2];
    char *lcsStr = getLCSString(str1, str2, len1, len2, dp);

    printf("The length of the Longest Common Subsequence is: %d\n", lcsLength);
    printf("The Longest Common Subsequence is: %s\n", lcsStr);

    // Free memory
    for (int i = 0; i <= len1; i++) {
        free(dp[i]);
    }
    free(dp);
    free(lcsStr);

    return 0;
}
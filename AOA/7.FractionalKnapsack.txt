#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int value;
    int weight;
    double ratio;
} Item;
int compare(const void *a, const void *b) {
    Item *item1 = (Item *)a;
    Item *item2 = (Item *)b;
    if (item1->ratio < item2->ratio) return 1;
    else if (item1->ratio > item2->ratio) return -1;
    else return 0;
}
double fractionalKnapsack(Item *items, int n, int capacity) {
    double maxProfit = 0.0;
    for (int i = 0; i < n; i++) {
        if (capacity == 0) break;
        if (items[i].weight <= capacity) {
            maxProfit += items[i].value;
            capacity -= items[i].weight;
        } else {
            maxProfit += items[i].value * ((double)capacity / items[i].weight);
            capacity = 0;
        }
    }
    return maxProfit;
}
int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);
    Item *items = (Item *)malloc(n * sizeof(Item));
    printf("Enter the value and weight of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d - Value: ", i + 1);
        scanf("%d", &items[i].value);
        printf("Item %d - Weight: ", i + 1);
        scanf("%d", &items[i].weight);
        items[i].ratio = (double)items[i].value / items[i].weight;
    }
    qsort(items, n, sizeof(Item), compare);
    double maxProfit = fractionalKnapsack(items, n, capacity);
    printf("Maximum profit: %.2lf\n", maxProfit);
    free(items);
    return 0;
}